generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Transaction {
  id                String            @id
  journalNumber     BigInt
  journalLineNumber Int
  date              DateTime
  description       String?
  amount            Int
  account           String?
  supplier          String?
  item              String?
  memo              String?
  remark            String?
  department        String?
  managementNumber  String?
  freeDealId        BigInt?           @unique
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  detailDescription String?
  detailId          BigInt            @unique
  receiptIds        String?
  tags              String?
  allocations       AllocationSplit[]

  @@map("transactions")
}

model Grant {
  id          Int          @id @default(autoincrement())
  name        String
  grantCode   String?
  totalAmount Int?
  startDate   DateTime?
  endDate     DateTime?
  status      String       @default("active")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  budgetItems BudgetItem[]

  @@map("grants")
}

model BudgetItem {
  id             Int               @id @default(autoincrement())
  name           String
  category       String?
  budgetedAmount Int?
  note           String?
  grantId        Int
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  sortOrder      Int               @default(0)
  allocations    AllocationSplit[]
  grant          Grant             @relation(fields: [grantId], references: [id], onDelete: Cascade)
  schedules      BudgetSchedule[]

  @@map("budget_items")
}

model BudgetSchedule {
  id           Int        @id @default(autoincrement())
  budgetItemId Int
  year         Int
  month        Int
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  budgetItem   BudgetItem @relation(fields: [budgetItemId], references: [id], onDelete: Cascade)

  @@unique([budgetItemId, year, month])
  @@map("budget_schedules")
}

model AllocationSplit {
  id           String       @id @default(cuid())
  budgetItemId Int
  amount       Int
  note         String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  detailId     BigInt?
  budgetItem   BudgetItem   @relation(fields: [budgetItemId], references: [id], onDelete: Cascade)
  transaction  Transaction? @relation(fields: [detailId], references: [detailId], onDelete: Cascade)

  @@map("allocation_splits")
}

model FreeeToken {
  id           Int      @id @default(autoincrement())
  accessToken  String
  refreshToken String
  expiresAt    DateTime
  tokenType    String   @default("Bearer")
  scope        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("freee_tokens")
}

model FreeeSync {
  id          Int      @id @default(autoincrement())
  lastSyncAt  DateTime
  syncStatus  String   @default("idle")
  syncMessage String?
  recordCount Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("freee_syncs")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  type      String
  color     String?
  sortOrder Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}
